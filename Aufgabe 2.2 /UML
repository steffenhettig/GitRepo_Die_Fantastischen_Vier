@startuml class_diagram

package "Provision" {
package "OS" #DDDDDD {
    class Scheduler {
        + Scheduler_init(void) : SchedulerRet
        + Scheduler_execute(void) : void
        + Scheduler_addTask(Task*) : Scheduler_Ret
        + Scheduler_removeTask(Task*) : Scheduler_Ret
    }

    class Task {
        + Task_init(Task*, TaskWorkCallback, TaskState, void*) : Task_Ret
    }

package Application
  {
   
    class Wait_Handler
    {
      Wait_NotifyStateHandler(void): void
    }
    class Calibration_Handler
    {
      Calibration_Process(void): void
    }
    class ModeSwitch_Handler
    {
      ModeSwitch_SwitchToNextParameterSet(void) : void
    }
    class StartRace_Handler
    {
      StartRace_Process(void): void
    }
    class RunRace_Handler
    {
      RunRace_Process(void): void
    }
    class RaceDone_Handler
    {
      RaceDone_Process(void): void
    }
  }


    class SoftTimer{
        + SoftTimer_init(SoftTimer*) : void
        + SoftTimer_start(SoftTimer*, UInt16) : SoftTimer_Ret
        + SoftTimer_Stop(SoftTImer*) : SoftTimer_Ret
        + SoftTimer_Update(SoftTimer*) : void
        + SoftTimer_restart(SoftTimer*) : SoftTimer_Ret
        + SoftTimer_get(SoftTimer*) : UInt16
        + SoftTimerHandler_init(void) : void
        + SoftTimerHandler_register(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_unRegister(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_update(void) : void
        + SoftTimer_getTimeStampMs(void) : UInt64
    }

    class ErrorHandler {
        + ErrorHandler_show(ErrorHandlerErrorCode) : void
        + ErrorHandler_halt(ErrorHandlerErrorCode) : void
        + ErrorHandler_setErrorCallback(ErrorCallback) : void
        + ErrorHandler_setPrintCallback(PrintCallback) : void
    }


    Scheduler -[hidden]-> ErrorHandler
    ErrorHandler -[hidden]-> SoftTimer

}
package "Service" #DDDDDD {
    class Button {
        + Button_init(void) : void
        + Button_getState(ButtonID) : ButtonState
    }

    class Buzzer {
        + Buzzer_init(void) : void
        + Buzzer_beep(BuzzerID) : void
    }

    class Display {
        + Display_init(void) : void
        + Display_clear(void) : void
        + Display_clearLine(void) : void
        + Display_home(void) : void
        + Display_gotoxy(UInt8, UInt8) : void
        + Display_write(char*, UInt8) : void
        + Display_writeBar(UInt8) : void
    }

    class LED {
        + Led_init(void) : void
        + Led_switchOn(Led_Led) : void
        + Led_switchOff(Led_Led) : void
    }

    class DriveControl {
        + DriveControl_init(void) : void
        + DriveControl_drive(DriveControlMotorID, UInt8, DriveControl_Direction) : void
        + DriveControl_getMileage(void) : Int32
        + DriveControl_resetMileage(void) : void
    }

    class LineSensor {
        + LineSensor_init(void) : void
        + LineSensor_startCalibration(void) : void
        + LineSensor_stopCalibration(void) : void
        + LineSensor_getCalibrationState(void) : bool
        + LineSensor_read(LineSensorValues*) : void
        + LineSensor_enableEmitter(void)
        + LineSensor_disableEmitter(void) : void
    }
}

package "HAL" #DDDDDD {

    class GPIO{
        + Gpio_init(void) : Gpio_Ret
        + Gpio_write(Gpio_ID, Gpio_State) : Gpio_Ret
        + Gpio_read(Gpio_ID, Gpio_State* : Gpio_Ret
        + Gpio_alloc(Gpio_ID, UInt8*) : Gpio_Ret
        + Gpio_free(Gpio_ID, UInt8) : Gpio_Ret
    }
    class PWM{
        + Pwm_init(void) : void
        + Pwm_setDutyCycle(PwmID, UInt8) : void
    }
    class TickTimer{
        + TickTimer_init(void) : void
        + TickTimer_setCallback(TimerTickCallback) : void
        + TickTimer_get(void) : UInt64
        + TickTimer_delay(UInt8) : void
    }
    class IRQ{
        + Irq_init(void) : void
        + Irq_enable(IrqID) : void
        + Irq_disable(IrqID) : void
        + Irq_setCallback(IrqID, IrqCallback) : void
    }
}
    class main {

    }
    main ..> Scheduler

}

package "Application"  {

    class "MainTask" {
        + MainTask_init(void) : MainTask_Ret
    }

    Scheduler <.up.. MainTask : register



}

note top of Application #99FF99 {
    Update with your Application content here

}

' ++++++++++++++++++++++++++++++++
' Service

Button ..> GPIO
Button ..> SoftTimer

Buzzer ..> PWM
Buzzer ..> SoftTimer

Display ..> GPIO
Display ..> TickTimer
Display ..> ErrorHandler

DriveControl ..> GPIO
DriveControl ..> PWM
DriveControl ..> IRQ

LED ..> GPIO

LineSensor ..> SoftTimer
LineSensor ..> GPIO
LineSensor ..> TickTimer
LineSensor .r.> Display

' ++++++++++++++++++++++++++++++++
' OS

' ErrorHandler ..> HAL

SoftTimer ..> TickTimer
Task ..> Wait_Handler
Task ..> ModeSwitch_Handler
Task ..> Calibration_Handler
Task ..> RunRace_Handler
Task ..> StartRace_Handler
Task ..> RaceDone_Handler
Calibration_Handler --> LineSensor 
Calibration_Handler --> Button
ModeSwitch_Handler --> Button
StartRace_Handler --> TickTimer
StartRace_Handler --> Buzzer
StartRace_Handler --> DriveControl
StartRace_Handler --> Button 
RunRace_Handler --> TickTimer
RunRace_Handler --> DriveControl
RaceDone_Handler --> TickTimer
RaceDone_Handler --> Buzzer
RaceDone_Handler --> DriveControl
RaceDone_Handler --> Display
Wait_Handler --> Button
Scheduler ..> Task
Scheduler ..> IRQ

@enduml
