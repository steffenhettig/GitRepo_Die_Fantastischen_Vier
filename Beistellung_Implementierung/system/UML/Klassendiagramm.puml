@startuml class_diagram

package "Provision" {
package "OS" #DDDDDD {
    class Scheduler {
        + Scheduler_init(void) : SchedulerRet
        + Scheduler_execute(void) : void
        + Scheduler_addTask(Task*) : Scheduler_Ret
        + Scheduler_removeTask(Task*) : Scheduler_Ret
    }

    class Task {
        + Task_init(Task*, TaskWorkCallback, TaskState, void*) : Task_Ret
    }

    class SoftTimer{
        + SoftTimer_init(SoftTimer*) : void
        + SoftTimer_start(SoftTimer*, UInt16) : SoftTimer_Ret
        + SoftTimer_Stop(SoftTImer*) : SoftTimer_Ret
        + SoftTimer_Update(SoftTimer*) : void
        + SoftTimer_restart(SoftTimer*) : SoftTimer_Ret
        + SoftTimer_get(SoftTimer*) : UInt16
        + SoftTimerHandler_init(void) : void
        + SoftTimerHandler_register(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_unRegister(SoftTimer*) : SoftTimer_Ret
        + SoftTimerHandler_update(void) : void
        + SoftTimer_getTimeStampMs(void) : UInt64
    }

    class ErrorHandler {
        + ErrorHandler_show(ErrorHandlerErrorCode) : void
        + ErrorHandler_halt(ErrorHandlerErrorCode) : void
        + ErrorHandler_setErrorCallback(ErrorCallback) : void
        + ErrorHandler_setPrintCallback(PrintCallback) : void
    }


    Scheduler -[hidden]-> ErrorHandler
    ErrorHandler -[hidden]-> SoftTimer

}
package "Service" #DDDDDD {
    class Button {
        + Button_init(void) : void
        + Button_getState(ButtonID) : ButtonState
    }

    class Buzzer {
        + Buzzer_init(void) : void
        + Buzzer_beep(BuzzerID) : void
    }

    class Display {
        + Display_init(void) : void
        + Display_clear(void) : void
        + Display_clearLine(void) : void
        + Display_home(void) : void
        + Display_gotoxy(UInt8, UInt8) : void
        + Display_write(char*, UInt8) : void
        + Display_writeBar(UInt8) : void
    }

    class LED {
        + Led_init(void) : void
        + Led_switchOn(Led_Led) : void
        + Led_switchOff(Led_Led) : void
    }

    class DriveControl {
        + DriveControl_init(void) : void
        + DriveControl_drive(DriveControlMotorID, UInt8, DriveControl_Direction) : void
        + DriveControl_getMileage(void) : Int32
        + DriveControl_resetMileage(void) : void
    }

    class LineSensor {
        + LineSensor_init(void) : void
        + LineSensor_startCalibration(void) : void
        + LineSensor_stopCalibration(void) : void
        + LineSensor_getCalibrationState(void) : bool
        + LineSensor_read(LineSensorValues*) : void
        + LineSensor_enableEmitter(void)
        + LineSensor_disableEmitter(void) : void
    }
}

package "HAL" #DDDDDD {

    class GPIO{
        + Gpio_init(void) : Gpio_Ret
        + Gpio_write(Gpio_ID, Gpio_State) : Gpio_Ret
        + Gpio_read(Gpio_ID, Gpio_State* : Gpio_Ret
        + Gpio_alloc(Gpio_ID, UInt8*) : Gpio_Ret
        + Gpio_free(Gpio_ID, UInt8) : Gpio_Ret
    }
    class PWM{
        + Pwm_init(void) : void
        + Pwm_setDutyCycle(PwmID, UInt8) : void
    }
    class TickTimer{
        + TickTimer_init(void) : void
        + TickTimer_setCallback(TimerTickCallback) : void
        + TickTimer_get(void) : UInt64
        + TickTimer_delay(UInt8) : void
    }
    class IRQ{
        + Irq_init(void) : void
        + Irq_enable(IrqID) : void
        + Irq_disable(IrqID) : void
        + Irq_setCallback(IrqID, IrqCallback) : void
    }
}
    class main {

    }
    main ..> Scheduler

}

package "Application"  {

    class "MainTask" {
        + MainTask_init(void) : MainTask_Ret
    }

    Scheduler <.up.. MainTask : register
    
    class "StateHandler" {
        + StateHandler_process(void) : void
        - gCurrentState : States
        - gCurrenEvent : Events
        - gErrorID : Errors
    }
    
    class "Calibration" {
        + Calibration_process(void) : Events
        + Calibration_entry(void) : void
    }
    
    class "Error" {
        + Error_entry(Errors errorID) : void
        + Error_process(void) : void
    }
    
    class "Init" {
        + Init_process(void) : void
    }
    
    class "ModeSwitch" {
        + ModeSwitch_process(void) : Events
    }
    
    class "RaceDone" {
        + RaceDone_process(void) : Events
    }
    
    class "RedetectTrack" {
        + RedetectTrack_process(void) : Events
    }
    
    class "RunRace" {
        + RunRace_process(void) : Events
        + RunRace_entry(void) : void
    }
    
     class "StartRace" {
        + StartRace_process(void) : Events
        + StartRace_entry(void) : void
    }
    
     class "Wait" {
        + Wait_process(void) : void
    }
    
     class "Driving" {
        + Driving_stopDriving(void) : void
        + Driving_driveForward(void) : void
        + Driving_followLine(LineSensorValues* SensorValues) : void
    }
}

note top of Application #99FF99 {
    Update with your Application content here

}

' ++++++++++++++++++++++++++++++++
' Application
MainTask ..> StateHandler

StateHandler ..> Calibration
StateHandler ..> ModeSwitch
StateHandler ..> Error
StateHandler ..> Init
StateHandler ..> RaceDone
StateHandler ..> RedetectTrack
StateHandler ..> RunRace
StateHandler ..> StartRace
StateHandler ..> Wait

Calibration ..> LineSensor
Calibration ..> SoftTimer
Calibration ..> DriveControl
Calibration ..> Driving
Calibration ..> StateHandler

Error ..> StateHandler
Error ..> ModeSwitch
Error ..> Button
Error ..> Buzzer
Error ..> Display
Error ..> DriveControl

Init ..> StateHandler
Init ..> Display

ModeSwitch ..> StateHandler
ModeSwitch ..> Driving

RaceDone ..> LineSensor
RaceDone ..> DriveControl
RaceDone ..> TickTimer
RaceDone ..> Buzzer
RaceDone ..> StateHandler
RaceDone ..> Driving
RaceDone ..> Display

RedetectTrack ..> StateHandler
RedetectTrack ..> LineSensor
RedetectTrack ..> SoftTimer
RedetectTrack ..> Driving

RunRace ..> StateHandler
RunRace ..> LineSensor
RunRace ..> SoftTimer
RunRace ..> Display
RunRace ..> StartRace
RunRace ..> TickTimer
RunRace ..> Driving
RunRace ..> DriveControl

StartRace ..> StateHandler
StartRace ..> SoftTimer
StartRace ..> DriveControl
StartRace ..> LineSensor
StartRace ..> TickTimer
StartRace ..> Calibration
StartRace ..> Buzzer
StartRace ..> Driving

Wait ..> StateHandler
Wait ..> Button
Wait ..> ModeSwitch
Wait ..> Display

Driving ..> LineSensor
Driving ..> DriveControl

' Service

Button ..> GPIO
Button ..> SoftTimer

Buzzer ..> PWM
Buzzer ..> SoftTimer

Display ..> GPIO
Display ..> TickTimer
Display ..> ErrorHandler

DriveControl ..> GPIO
DriveControl ..> PWM
DriveControl ..> IRQ

LED ..> GPIO

LineSensor ..> SoftTimer
LineSensor ..> GPIO
LineSensor ..> TickTimer
LineSensor .r.> Display



' ++++++++++++++++++++++++++++++++
' OS

' ErrorHandler ..> HAL

SoftTimer ..> TickTimer

Scheduler ..> Task
Scheduler ..> IRQ

@enduml
